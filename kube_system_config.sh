#!/bin/bash
# Title: System Configuration Script
# Description: Configures static IP, hostname, passwordless sudo, and disables swap.
#
################################################################################
# 1. CONFIGURATION VARIABLES
#    >>> CHANGE THESE VALUES ACCORDING TO YOUR NETWORK AND SYSTEM REQUIREMENTS <<<
################################################################################

# Hostname Configuration
NEW_HOSTNAME="kube1"

# User Configuration (Must be an existing user on the system)
SUDO_USER=$(whoami)

# Network Configuration (Assuming Netplan is used, typically in Ubuntu/Debian)
# To find your current network interface, use: 'ip a | grep "state UP"'
INTERFACE="enp0s1"
STATIC_IP="192.168.64.10/24"
GATEWAY="192.168.64.1"
DNS_SERVERS="[8.8.8.8, 8.8.4.4]" # Format as a YAML list

# Netplan configuration file path (common for Netplan)
NETPLAN_CONFIG="/etc/netplan/50-cloud-init.yaml"

################################################################################
# 2. HELPER FUNCTIONS
################################################################################

# Function to check for required root access
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "ERROR: This script must be run as root or with sudo."
        exit 1
    fi
}

# Function to safely create a passwordless sudo file
config_passwordless_sudo() {
    echo -e "\n--- 3. Configuring passwordless sudo for user: $SUDO_USER"
    local SUDOERS_FILE="/etc/sudoers.d/$SUDO_USER"

    if grep -q "$SUDO_USER ALL=(ALL) NOPASSWD: ALL" /etc/sudoers || \
       grep -q "$SUDO_USER ALL=(ALL) NOPASSWD: ALL" /etc/sudoers.d/* 2>/dev/null; then
        echo "User '$SUDO_USER' already has passwordless sudo configured. Skipping."
        return 0
    fi

    # Create a new file in /etc/sudoers.d/ for the specific user
    echo "$SUDO_USER ALL=(ALL) NOPASSWD: ALL" > "$SUDOERS_FILE"
    chmod 0440 "$SUDOERS_FILE"
    echo "Passwordless sudo configured successfully via $SUDOERS_FILE."
}

# Function to set the system hostname
set_hostname() {
    echo -e "\n--- 4. Setting hostname to: $NEW_HOSTNAME"
    if [[ $(hostnamectl status | grep "Static hostname" | awk '{print $3}') == "$NEW_HOSTNAME" ]]; then
        echo "Hostname is already set to '$NEW_HOSTNAME'. Skipping."
        return 0
    fi

    hostnamectl set-hostname "$NEW_HOSTNAME"
    echo "Hostname set. Remember to log out and log back in to see the change in your terminal prompt."
}

# Function to disable swap permanently
disable_swap() {
    echo -e "\n--- 5. Disabling swap permanently"

    # 5a. Disable swap immediately
    if swapon -s | grep -q 'partition'; then
        echo "Disabling active swap..."
        swapoff -a
        echo "Swap has been disabled for the current session."
    else
        echo "No active swap found. Skipping immediate disable."
    fi

    # 5b. Comment out all swap entries in /etc/fstab
    if grep -q ' swap ' /etc/fstab; then
        echo "Commenting out swap entries in /etc/fstab..."
        # The sed command finds lines containing ' swap ' and prefixes them with '#'
        sed -i.bak '/ swap / s/^/#/' /etc/fstab
        echo "/etc/fstab entries commented out. Backup saved as /etc/fstab.bak"
    else
        echo "No swap entries found in /etc/fstab. Skipping modification."
    fi
}

# Function to configure static IP using Netplan (Ubuntu/Debian)
config_static_ip() {
    echo -e "\n--- 1. Configuring static IP for interface: $INTERFACE"

    # Check if Netplan is available
    if ! command -v netplan &> /dev/null; then
        echo "WARNING: Netplan command not found. Skipping IP configuration."
        echo "Please configure the static IP manually for your distribution ($INTERFACE: $STATIC_IP)."
        return 1
    fi

    # Generate the Netplan configuration file
    cat << EOF > "$NETPLAN_CONFIG"
# Configuration generated by system_config.sh
network:
  version: 2
  renderer: networkd
  ethernets:
    $INTERFACE:
      dhcp4: no
      addresses: [$STATIC_IP]
      routes:
        - to: default
          via: $GATEWAY
      nameservers:
        addresses: $DNS_SERVERS
EOF

    echo "Netplan configuration written to $NETPLAN_CONFIG"
    echo "Applying Netplan configuration..."
    netplan apply
    if [ $? -eq 0 ]; then
        echo "Static IP applied successfully."
        echo "New IP address for $INTERFACE should be $STATIC_IP."
    else
        echo "ERROR: Failed to apply Netplan configuration. Check the syntax in $NETPLAN_CONFIG."
    fi
}

# Function to check for password on current user (Informational)
check_password_access() {
    echo -e "\n--- 2. Checking for password access"
    # This is an informational check. A password must be set before SSHing.
    if sudo -n true 2>/dev/null; then
        echo "INFO: User '$SUDO_USER' has passwordless sudo access (or is already root)."
    else
        echo "INFO: User '$SUDO_USER' requires a password to use sudo."
    fi
    echo "Make sure you have set a strong password for '$SUDO_USER' to enable password access (ssh)."
}


################################################################################
# 3. MAIN EXECUTION
################################################################################

check_root

echo "Starting system configuration script..."

# Execute all functions in order
config_static_ip
check_password_access
config_passwordless_sudo
set_hostname
disable_swap

echo -e "\n*** System Configuration Complete ***"
echo "Please reboot the system for all changes (especially hostname) to take full effect."
echo "You can check the new IP and Hostname after reboot."
